name: CMake

on:
  push:
    branches: [ master ]

defaults:
  run:
    shell: bash
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  PROJECT_NAME: UpdateAddresses
  LICENSE_SCRIPT: https://gist.githubusercontent.com/SupaStuff/e8fe5e4edbecb87d6659ab4b686aa2bc/raw/a11a1985c5514df36962c9ace636cc2c3c6504c5/cmake-collect-licenses
  VCPKG_DEFAULT_TRIPLET: x64-windows
  VCPKG_FEATURE_FLAGS: "manifests,versions"
  VCPKG_DISABLE_METRICS: true

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v6
      with:
        setupOnly: true
        vcpkgGitCommitId: 75522bb1f2e7d863078bcd06322348f053a9e33f

    - name: Configure CMake
      run: cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -S . -B build/ -A x64

    - name: Build
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build build/ --config $BUILD_TYPE

#     - name: Test
#       working-directory: ${{runner.workspace}}/build
#       shell: bash
#       # Execute tests defined by the CMake configuration.
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest -C $BUILD_TYPE

    - name: Copy licenses
      run: bash <(curl -Ls $LICENSE_SCRIPT)

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PROJECT_NAME }} Release
        path: |
          ./build/src/Release/*
          ./licenses/

  publish:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      git_tag: ${{ steps.set_vars.outputs.git_tag }}

    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.PROJECT_NAME }} Release

    - name: Zip it
      run: |
        mv build/src/Release/*.dll .
        zip $PROJECT_NAME.zip -r licenses/ *.dll

    - name: Update changelog and bump version
      id: set_vars
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        wget -nc -q -O Changelog.md https://raw.githubusercontent.com/wiki/$GITHUB_REPOSITORY/Changelog.md || true
        npx standard-version --silent --dry-run | sed '/---/d' > notes.md
        npx standard-version

        GIT_TAG=$(cat notes.md | grep -o "\[.*\]" -m 1 | tail -n1)
        GIT_TAG=${GIT_TAG#[}
        GIT_TAG=${GIT_TAG%]}
        echo "GIT_TAG=v$GIT_TAG" >> $GITHUB_ENV
        echo "::set-output name=git_tag::v$GIT_TAG"

    - name: Create release with binaries
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create $GIT_TAG -t "Release $GIT_TAG" --notes-file notes.md \
           *.zip \
           $PROJECT_NAME.dll

    - name: Upload Changelog
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PROJECT_NAME }} Changelog
        path: Changelog.md

  wiki:
    needs: publish
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      with:
        repository: ${{github.repository}}.wiki

    - name: Download Changelog
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.PROJECT_NAME }} Changelog

    - name: Commit changes and push
      env:
        GIT_TAG: ${{ needs.publish.outputs.git_tag }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if (test $(git diff --numstat | cut -f1) -gt 2)
        then
          git config user.name "Github Actions"
          git config user.email action@github.com
          git add -A
          git commit -m "update wiki for $GIT_TAG"
          git tag -a $GIT_TAG -m "$GIT_TAG"
          git push --follow-tags origin master
        else
          echo "No notable changes in this release"
          git reset --hard HEAD
        fi
