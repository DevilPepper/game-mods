name: Item Tracker CI

on:
  push:
    branches: [ master ]

env:
  Project_Name: ItemBoxTracker

defaults:
  run:
    shell: bash

jobs:
  interrupt:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ github.token }}

  build:
    strategy:
      matrix:
        configuration:
          # - Debug
          - Release
    # https://github.com/actions/virtual-environments
    runs-on: windows-latest

    outputs:
      git_tag: ${{ steps.set_vars.outputs.git_tag }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - id: set_vars
      run: |
        npx standard-version --silent --dry-run | sed '/---/d' > notes.md
        bump=$(cat notes.md | grep -o "\[.*\]" -m 1)
        bump=${bump#[}
        bump=${bump%]}

        echo "git_tag=$bump" >> $GITHUB_ENV
        echo "::set-output name=git_tag::$bump"

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the applications
      env:
        NUGET_USERNAME: ${{ github.repository_owner }}
        NUGET_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      shell: pwsh
      run: |
        cp .github/NuGet.Config .
        msbuild -m /t:Restore

    - name: Build the apps
      env:
        Configuration: ${{ matrix.configuration }}
      shell: pwsh
      run: |
        $PREVIOUS="$(git describe --first-parent --abbrev=0)"
        if( $(git diff --name-only $PREVIOUS HEAD -- $env:Project_Name/) -ne $null) {
          $version="$env:git_tag.0"
        } else {
          curl -L https://github.com/$env:GITHUB_REPOSITORY/releases/latest/download/module.json -o module.json
          $version="$($(cat module.json | ConvertFrom-Json -Depth 3).Version)"
        }

        msbuild -m /p:"Configuration=$env:Configuration,AssemblyVersionNumber=$version"

    - name: Generate JSON
      env:
        NUGET_USERNAME: ${{ github.repository_owner }}
        NUGET_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        Configuration: ${{ matrix.configuration }}
      if: matrix.configuration == 'Release'
      run: |
        nuget install Microsoft.Net.Compilers.Toolset -OutputDirectory packages -Version 3.9.0-2.final
        CSI="packages/Microsoft.Net.Compilers.Toolset.3.9.0-2.final/tasks/net472/csi.exe"

        # copy dlls for scripts to use
        cp ${Project_Name}/bin/Release/*.dll scripts/

        # move release notes to release directory
        mv notes.md ${Project_Name}/bin/Release/

        $CSI scripts/gen-module-json.csx $Configuration
        $CSI scripts/gen-settings-json.csx $Configuration

    - name: Update changelog and bump version
      shell: pwsh
      run: |
        scripts/download-changelog.ps1
        npx standard-version

    # Upload the builds for next job and debugging
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        # Don't know if this should be unique to the tag/branch/PR
        name: Item Tracker Plugin for Hunter Pie ${{ matrix.configuration }}
        path: ./**/bin/*

    - name: Upload Changelog
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.Project_Name }} Changelog
        path: Changelog.md

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: Item Tracker Plugin for Hunter Pie Release

    - name: Zip it
      run: |
        mkdir -p Modules/${Project_Name}
        RELEASE_DIR="${Project_Name}/bin/Release"
        mv ${RELEASE_DIR}/*.dll \
           ${RELEASE_DIR}/module.json \
           ${RELEASE_DIR}/settings.json \
           Modules/${Project_Name}
        rm Modules/${Project_Name}/HunterPie.*.dll \
           Modules/${Project_Name}/Newtonsoft.*.dll
        zip ${Project_Name}.zip -r Modules

    - name: Create release with binaries
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_TAG: ${{ needs.build.outputs.git_tag }}
      run: |
        gh release create v$GIT_TAG -t "Release v$GIT_TAG" --notes-file ${Project_Name}/bin/Release/notes.md \
           ${Project_Name}.zip \
           Modules/${Project_Name}/*

  wiki:
    needs: build
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      with:
        repository: ${{github.repository}}.wiki

    - name: Download Changelog
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.Project_Name }} Changelog

    - name: Commit changes and push
      env:
        GIT_TAG: ${{ needs.build.outputs.git_tag }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if (test $(git diff --numstat | cut -f1) -gt 2)
        then
          git config user.name "Github Actions"
          git config user.email action@github.com
          git add -A
          git commit -m "update wiki for $GIT_TAG"
          git tag -a $GIT_TAG -m "$GIT_TAG"
          git push --follow-tags origin master
        else
          echo "No notable changes in this release"
          git reset --hard HEAD
        fi
